<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lemodd.github.io</id>
    <title>LEMO</title>
    <updated>2019-11-02T15:20:09.165Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lemodd.github.io"/>
    <link rel="self" href="https://lemodd.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://lemodd.github.io/images/avatar.png</logo>
    <icon>https://lemodd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, LEMO</rights>
    <entry>
        <title type="html"><![CDATA[树莓派 + pyecharts 气象数据收集与可视化]]></title>
        <id>https://lemodd.github.io/post/shu-mei-pai-pyecharts-qi-xiang-shu-ju-shou-ji-yu-ke-shi-hua</id>
        <link href="https://lemodd.github.io/post/shu-mei-pai-pyecharts-qi-xiang-shu-ju-shou-ji-yu-ke-shi-hua">
        </link>
        <updated>2019-11-02T11:59:06.000Z</updated>
        <summary type="html"><![CDATA[<p>这个小“项目”已经稳定运行了1年多。主要特性是树莓派将收集的室内温度、湿度和室外温度以及CPU温度等数据存入sqlite数据库，利用pyecharts进行数据可视化，用ngix架设服务器后可通过页面浏览。申请公网IP后，出门时也可以查看数据。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个小“项目”已经稳定运行了1年多。主要特性是树莓派将收集的室内温度、湿度和室外温度以及CPU温度等数据存入sqlite数据库，利用pyecharts进行数据可视化，用ngix架设服务器后可通过页面浏览。申请公网IP后，出门时也可以查看数据。</p>
<!-- more -->
<h2 id="硬件清单">硬件清单</h2>
<pre><code>1. 树莓派 Zero W
2. ds18b20(ds1302)模块
3. sht30模块
</code></pre>
<h2 id="软件清单">软件清单</h2>
<pre><code>1. python
2. pyecharts
3. ngix
</code></pre>
<h2 id="硬件搭设">硬件搭设</h2>
<p>树莓派 zero w价格便宜，自带wifi模块，功能强大。到手后刷入官方lite版系统，不需要桌面。具体请参考教程，“<a href="http://shumeipai.nxez.com/2017/09/13/raspberry-pi-network-configuration-before-boot.html">无屏幕和键盘配置树莓派WiFi和SSH</a>”。</p>
<p>室外温度采用ds18b20模块，此模块为“单总线模块”，数据和电源共用一条线，加上地线共两条线，正好一根据电话线即可，接线见下图。<br>
<img src="https://lemodd.github.io/post-images/1572705796037.png" alt=""></p>
<p>sht30是盛世瑞恩出产的一款基于i2c传输协议的温、湿度传感器，联线比较简单，唯一需要注意的是它的电压是3.3V，不要接到5V上去了。</p>
<h2 id="编写程序">编写程序</h2>
<h3 id="主程序">主程序</h3>
<h3 id="获取室内温-度">获取室内温、度</h3>
<pre><code class="language-python">import smbus
import time

def get():
	bus = smbus.SMBus(1)
	bus.write_i2c_block_data(0x44, 0x2C, [0x06])
	time.sleep(0.5)
	data = bus.read_i2c_block_data(0x44, 0x00, 6)
	cTemp = ((((data[0] * 256.0) + data[1]) * 175) / 65535.0) - 45
	humidity = 100 * (data[3] * 256 + data[4]) /65535.0
    
	return(round(cTemp,2),round(humidity,2))
</code></pre>
<h3 id="获取室外温度">获取室外温度</h3>
<pre><code class="language-python">def getDs18b20():
	with open(&quot;/sys/bus/w1/devices/28-000004b1dd3f/w1_slave&quot;) as f:
		text = f.readlines()
		secondline=text[1]
		temp = secondline.split(&quot; &quot;)[9]
		temp = temp.strip()
		temp = float(temp[2:])/1000
		return temp
</code></pre>
<h3 id="获取cpu温度">获取CPU温度</h3>
<h3 id="开机运行supervisor">开机运行supervisor</h3>
<h3 id="安装-设置ngix">安装、设置ngix</h3>
<h2 id="外网访问设置">外网访问设置</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[吃苹果]]></title>
        <id>https://lemodd.github.io/post/chi-ping-guo</id>
        <link href="https://lemodd.github.io/post/chi-ping-guo">
        </link>
        <updated>2019-11-02T05:28:21.000Z</updated>
        <summary type="html"><![CDATA[<p>宝妈给宝定了个规矩，每天吃一个苹果🍎。<br>
一天，宝儿在忙着玩玩具，爷爷给宝儿削了个苹果，可是宝不愿意放下玩具🚀。<br>
&quot;吃了苹果我给你买奥特曼。”，爷爷说。<br>
宝儿不情愿地拿起了苹果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>宝妈给宝定了个规矩，每天吃一个苹果🍎。<br>
一天，宝儿在忙着玩玩具，爷爷给宝儿削了个苹果，可是宝不愿意放下玩具🚀。<br>
&quot;吃了苹果我给你买奥特曼。”，爷爷说。<br>
宝儿不情愿地拿起了苹果。</p>
<!-- more -->
<p>不到一分钟就就对爷爷说：<br>
“爷爷，我吃完了，可以去奥特曼了吧。”<br>
爷爷说：“这么快就吃完了？”<br>
宝说：“是呀，这个苹果就是核儿有点大。”<br>
爷爷拿来一看，苹果只被了草地啃了一圈，剩下的全是核儿了😛。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python调用默认打印机]]></title>
        <id>https://lemodd.github.io/post/python-diao-yong-mo-ren-da-yin-ji</id>
        <link href="https://lemodd.github.io/post/python-diao-yong-mo-ren-da-yin-ji">
        </link>
        <updated>2019-10-31T14:57:55.000Z</updated>
        <summary type="html"><![CDATA[<p>  有时候需要打印很多资料，一个个手动打印直是繁琐又浪费时间，Python真是各种懒癌晚期的特效药💊啊。<br>
  经过一翻搜索终于找到了方法。需要用到win32api和win32print两个模块。</p>
]]></summary>
        <content type="html"><![CDATA[<p>  有时候需要打印很多资料，一个个手动打印直是繁琐又浪费时间，Python真是各种懒癌晚期的特效药💊啊。<br>
  经过一翻搜索终于找到了方法。需要用到win32api和win32print两个模块。</p>
<!-- more -->
<p><ul class="markdownIt-TOC">
<li>
<ul>
<li><a href="#1-%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E5%BA%93">1. 安装所需库</a></li>
<li><a href="#2-%E6%89%80%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0">2. 所用的函数</a></li>
<li><a href="#3-%E5%8C%85%E8%A3%85%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0">3. 包装为一个函数</a></li>
<li><a href="#4%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E6%89%93%E5%8D%B0">4.实现批量打印</a></li>
</ul>
</li>
</ul>
</p>
<h2 id="1-安装所需库">1. 安装所需库</h2>
<p>只要安装<code>pywin32</code>库就可以使用win32api和win32print两个模块。</p>
<pre><code class="language-python">pip install pywin32
</code></pre>
<h2 id="2-所用的函数">2. 所用的函数</h2>
<pre><code class="language-python">win32api.ShellExcute(hWnd，Operation，FileName，
                     Parameters，Directory，ShowCmd)
</code></pre>
<p>各参数的意义如下：</p>
<pre><code class="language-python">  hWnd: HWND;        {指定父窗口句柄}
  Operation: PChar;  {指定动作, 譬如: open、print}
  FileName: PChar;   {指定要打开的文件或程序}
  Parameters: PChar; {给要打开的程序指定参数; 如果打开的是文件这里应该是 nil}
  Directory: PChar;  {缺省目录}
  ShowCmd: Integer   {打开选项}
</code></pre>
<p>执行成功会返回应用程序句柄; 如果这个值 &lt;= 32, 表示执行错误</p>
<h2 id="3-包装为一个函数">3. 包装为一个函数</h2>
<pre><code class="language-python🖨">import win32api
import win32print

def send2printer(filename):
     win32api.ShellExecute (
       0,
       &quot;print&quot;,
       filename,
       '/d:&quot;%s&quot;' % win32print.GetDefaultPrinter (),
       &quot;.&quot;,
       0
     )

if __name__ == &quot;__main__&quot;:
    send2printer('TEST.docx')
</code></pre>
<h2 id="4实现批量打印">4.实现批量打印</h2>
<p>如果有巨量的文件要打印，比如打印当前目录下所有的 <em>.docx</em> 文件，可以这样做</p>
<pre><code class="language-python">import glob
if __name__ == &quot;__main__&quot;:
    for filename in glob.glob('*.docx'):
        send2printer(filename)
</code></pre>
<p>是不是很简单。🎉</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[能在马路上跑步吗？]]></title>
        <id>https://lemodd.github.io/post/neng-zai-ma-lu-shang-pao-bu-ma</id>
        <link href="https://lemodd.github.io/post/neng-zai-ma-lu-shang-pao-bu-ma">
        </link>
        <updated>2019-10-31T14:44:05.000Z</updated>
        <content type="html"><![CDATA[<p>--爸爸，小朋友能在马路上跑步吗？<br>
--不能，马路上全是车，太危险！<br>
--哪大人能在马路上跑步吗？<br>
--也不能！<br>
--那为什么马拉松就在马路上跑呢！？<br>
--😰</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[我就静静地看你装]]></title>
        <id>https://lemodd.github.io/post/wo-jiu-jing-jing-di-kan-ni-zhuang</id>
        <link href="https://lemodd.github.io/post/wo-jiu-jing-jing-di-kan-ni-zhuang">
        </link>
        <updated>2019-10-31T00:30:39.000Z</updated>
        <summary type="html"><![CDATA[<p>小宝从幼儿园回家，本来就在幼儿园吃过饭了，<br>
宝妈为了让她再吃点绿叶菜，喝点粥，就说：<br>
“今天张老师给我打电话了。”<br>
宝就问：“老师说什么了”。<br>
“说你在幼儿园表现特别好，爱劳动，积极回答问题，</p>
]]></summary>
        <content type="html"><![CDATA[<p>小宝从幼儿园回家，本来就在幼儿园吃过饭了，<br>
宝妈为了让她再吃点绿叶菜，喝点粥，就说：<br>
“今天张老师给我打电话了。”<br>
宝就问：“老师说什么了”。<br>
“说你在幼儿园表现特别好，爱劳动，积极回答问题，</p>
<!-- more -->
<p>现在也爱吃菜了，blabla...，所以把粥喝了，菜吃完吧😊”<br>
宝疑惑地说：“我怎么没听到？”。<br>
“老师在外面打的，你怎么听得到”<br>
宝一脸鄙视地说：“老师打电话的时候我就在旁边，<br>
听到老师说，‘是小宝妈妈吗？。。。’。”<br>
宝妈🤤</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小学生4位数进位加法竖式题（二）]]></title>
        <id>https://lemodd.github.io/post/xiao-xue-sheng-4-wei-shu-jin-wei-jia-fa-shu-shi-ti-er</id>
        <link href="https://lemodd.github.io/post/xiao-xue-sheng-4-wei-shu-jin-wei-jia-fa-shu-shi-ti-er">
        </link>
        <updated>2019-10-30T07:00:38.000Z</updated>
        <content type="html"><![CDATA[<h3 id="2从有到好">2.从有到好</h3>
<p>上篇已实现了出题的基本功能，但是还需要手动调整格式，还不是那么完美。<br>
本篇将使用python-docx真正的生成word文档。<br>
安装python-docx</p>
<pre><code class="language-python">pip install python-docx
</code></pre>
<p>测试下有没有安装成功</p>
<pre><code class="language-python">from  docx import  Document
#新建文档
document = Document()
#添加文本
paragraph = document.add_paragraph('添加了文本')
#保存
document.save(&quot;test3.docx&quot;)
</code></pre>
<p>打开生成的docx文件<br>
<img src="https://lemodd.github.io/post-images/1572512200314.png" alt=""><br>
成功安装，下一步就是把之前的af()和bf()放进来了</p>
<pre><code class="language-python">for i in range(5):
    for j in range(3):
        document.add_paragraph(af())
    document.add_paragraph('\n')
    for k in range(3):
        document.add_paragraph(bf())
</code></pre>
<p>貌似不错，生成算式，一行3个，一共五行，哈哈<br>
<img src="https://lemodd.github.io/post-images/1572512668799.png" alt=""><br>
咦!?怎么都在一列上了，原来document.add_paragraph()，每次都是新加一行，把代码改下</p>
<pre><code class="language-python">for i in range(1):
    for j in range(3):
        s = af() + &quot;       &quot;+af()+ &quot;       &quot;+af()
        document.add_paragraph(s)
        s = bf() + &quot;       &quot;+bf()+ &quot;       &quot;+bf()
        document.add_paragraph(s)
        document.add_paragraph(&quot;-&quot;*40)
        document.add_paragraph()
</code></pre>
<p>大体有个样子了，但是还是对不齐。<br>
<img src="https://lemodd.github.io/post-images/1572513326651.png" alt=""><br>
这时突然想到可以用表格啊，把式子放到表格里，不就自然对齐了吗！</p>
<pre><code class="language-python">table = document.add_table(rows = 10, cols = 3)
for row in range(0,10,2):
    for i in range(3):
        table.cell(row,i).text = af()+&quot;\n&quot;+bf()
        #右对齐
        table.cell(row,i).paragraphs[0].paragraph_format.alignment = WD_ALIGN_PARAGRAPH.RIGHT
</code></pre>
<p>效果如下<br>
<img src="https://lemodd.github.io/post-images/1572513553210.png" alt=""><br>
对齐的问题解决了，就是默认word不显示表格线，需要手动加下。<br>
<img src="https://lemodd.github.io/post-images/1572513645737.png" alt=""><br>
为了保护小朋友的眼睛，加大字号，顺便改下字体。</p>
<pre><code class="language-python">document.styles['Normal'].font.name = u'黑体'
document.styles['Normal'].font.size = 360000
document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'黑体')
</code></pre>
<p>再加上“姓名，得分和日期”，效果如下<br>
<img src="https://lemodd.github.io/post-images/1572514157872.png" alt=""><br>
如果感觉太单调，可以设置下表格样式，如下<br>
<img src="https://lemodd.github.io/post-images/1572514334510.png" alt=""><br>
最后完整代码如下</p>
<pre><code class="language-python">from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.ns import qn
import random

def af():
    a = [str(random.randint(1,9)) for i in range(4)]
    astr = &quot;&quot;.join(a)
    astr = &quot; &quot;+astr
    return astr

def bf():
    b = [str(random.randint(1,9)) for i in range(4)]
    bstr = &quot;&quot;.join(b)
    bstr = &quot;+ &quot;+bstr
    return bstr

document = Document()

document.styles['Normal'].font.name = u'黑体'
document.styles['Normal'].font.size = 360000
document.styles['Normal']._element.rPr.rFonts.set(qn('w:eastAsia'), u'黑体')

document.add_paragraph('姓名____  得分____   日期_____')

table = document.add_table(rows = 10, cols = 3)

for row in range(0,10,2):
    for i in range(3):
        table.cell(row,i).text = af()+&quot;\n&quot;+bf()
        table.cell(row,i).paragraphs[0].paragraph_format.alignment = WD_ALIGN_PARAGRAPH.RIGHT

document.save(&quot;quiz.docx&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小学生4位数进位加法竖式题（一）]]></title>
        <id>https://lemodd.github.io/post/xiao-xue-sheng-4-wei-shu-jin-wei-jia-fa-chu-ti</id>
        <link href="https://lemodd.github.io/post/xiao-xue-sheng-4-wei-shu-jin-wei-jia-fa-chu-ti">
        </link>
        <updated>2019-10-30T02:12:46.000Z</updated>
        <summary type="html"><![CDATA[<p>老师👩‍🎓留作业要求家长每天要给小朋友👦出15道“4位数进位加法竖式题”，虽说这并不考验什么智商，但是每天要找张纸📝，一道道地出题，再加上我的字还是太入眼了，总这是让人不爽。<br>
但是自从有了Python大法一切都简单了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>老师👩‍🎓留作业要求家长每天要给小朋友👦出15道“4位数进位加法竖式题”，虽说这并不考验什么智商，但是每天要找张纸📝，一道道地出题，再加上我的字还是太入眼了，总这是让人不爽。<br>
但是自从有了Python大法一切都简单了。</p>
<!-- more -->
<p><strong>先看下最终效果</strong><br>
<img src="https://lemodd.github.io/post-images/1572408824834.jpg" alt=""></p>
<h3 id="1-从无到有">1. 从无到有</h3>
<p>每道题要随机生成，这就需要产生两个随机的4位数，第一个4位加数叫a</p>
<pre><code class="language-python"> a = [str(random.randint(1,9)) for i in range(4)] 
</code></pre>
<p>这是一个4个长度的列表，需转换为字符串。</p>
<pre><code class="language-python"> astr = &quot;&quot;.join(a) 
</code></pre>
<p>写成一个函数</p>
<pre><code class="language-python">def af():
   a = [str(random.randint(1,9)) for i in range(4)]
   astr = &quot;&quot;.join(a)
   astr = &quot; &quot;+astr #加一个空格是为了与保持与第二个数对齐
   return astr
</code></pre>
<p>另一个4位加数叫b，同样写成函数</p>
<pre><code class="language-python">def bf():
   b = [str(random.randint(1,9)) for i in range(4)]
   bstr = &quot;&quot;.join(b)
   bstr = &quot;+&quot;+bstr
   return astr
</code></pre>
<p>最后将生成的式子写到一个文件内</p>
<pre><code class="language-python">with open('hw.txt','w') as f:
    f.write(af())
    f.write(&quot;\n&quot;)
    f.write(bf())
    f.write(&quot; &quot;*5)
</code></pre>
<p>看下运行的效果<br>
<img src="https://lemodd.github.io/post-images/1572412989603.jpg" alt=""><br>
已经有了初步的样子，主要问题是对不齐，不要紧修改下，直接生成.doc文件试试看🙏。<br>
将字体设为黑体，二号字，效果还不错嘛!😁<br>
<img src="https://lemodd.github.io/post-images/1572413218360.jpg" alt=""><br>
进一步完善，加上底部的横线，并且每行三个坚式，<br>
将字体设为黑体，二号字，行距20，左对齐。最终效果如下<br>
<img src="https://lemodd.github.io/post-images/1572413488928.jpg" alt="" width="400" height="400"><br>
非常完美，点击打印。。。臭小子👶，每天放学有的你做了，哈哈哈😏<br>
最终代码如下</p>
<pre><code class="language-python">import random

def af():
    a = [str(random.randint(1,9)) for i in range(4)]
    astr = &quot;&quot;.join(a)
    astr = &quot; &quot;+astr
    return astr
def bf():
    b = [str(random.randint(1,9)) for i in range(4)]
    bstr = &quot;&quot;.join(b)
    bstr = &quot;+&quot;+bstr
    return bstr
    
with open('hw.doc','w') as f:
    for i in range(6*6):
        f.write(af())
        f.write(&quot; &quot;*5)
        f.write(af())
        f.write(&quot; &quot;*5)
        f.write(af())
        f.write(&quot;\n&quot;)
        
        f.write(bf())
        f.write(&quot; &quot;*5)
        f.write(bf())
        f.write(&quot; &quot;*5)
        f.write(bf())
        f.write(&quot;\n&quot;)
        
        f.write(&quot;-&quot;*5)
        f.write(&quot; &quot;*5)
        f.write(&quot;-&quot;*5)
        f.write(&quot; &quot;*5)
        f.write(&quot;-&quot;*5)
        f.write(&quot; &quot;*5)
        f.write(&quot;\n&quot;)
        f.write(&quot;\n&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[华硕RT-AC68U 梅林固件 科学上网]]></title>
        <id>https://lemodd.github.io/post/hua-shuo-rt-ac68u-ge-lin-gu-jian-ke-xue-shang-wang</id>
        <link href="https://lemodd.github.io/post/hua-shuo-rt-ac68u-ge-lin-gu-jian-ke-xue-shang-wang">
        </link>
        <updated>2019-10-30T00:23:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="账号设置">账号设置</h2>
<figure data-type="image" tabindex="1"><img src="https://lemodd.github.io/post-images/1572395069830.png" alt=""></figure>
<h2 id="kcp加速设置">KCP加速设置</h2>
<figure data-type="image" tabindex="2"><img src="https://lemodd.github.io/post-images/1572395145992.png" alt=""></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lemodd.github.io/post/hello-gridea</id>
        <link href="https://lemodd.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>